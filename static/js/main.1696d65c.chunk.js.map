{"version":3,"sources":["logo.svg","types.js","containers/AppContainer.js","screens/Options.js","screens/AddNotes.js","screens/Info.js","screens/Withdraw.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SCREEN","NOTE_TYPE","N5","N10","N20","N50","N100","INITIAL_STATE","screen","keyboard","noteSelected","AppContainer","props","setScreen","setState","getTotalAtm","total","notes","state","Object","values","forEach","value","key","clearApp","error","keyboardType","prevState","clearKeyboard","selectNoteType","addNotes","parseInt","withdraw","totalMoney","combinations","indexCombinations","sort","a","b","noteValue","indexNote","divisor","firstPass","i","length","push","reduce","prev","curr","previousNoteValue","find","el","exit","j","currentTotalValue","console","log","handleEnter","Container","Options","to","app","className","onClick","AddNotes","map","Info","Withdraw","App","componentDidMount","renderContent","renderKeyboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1696d65c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SCREEN = {\n  INITIALIZE: 0,\n  ADD_NOTES: 1,\n  REMOVE_NOTES: 2,\n  WITHDRAW: 3,\n  SHOW_INFO: 4,\n  SHOW_OPTIONS: 5\n};\n\nexport const NOTE_TYPE = {\n  N5: 5,\n  N10: 10,\n  N20: 20,\n  N50: 50,\n  N100: 100\n};\n","import { Container } from \"unstated\";\nimport { SCREEN, NOTE_TYPE } from \"../types\";\n\nconst INITIAL_STATE = {\n  screen: SCREEN.SHOW_OPTIONS,\n  keyboard: \"\",\n  noteSelected: null\n};\n\nclass AppContainer extends Container {\n  constructor(props) {\n    super(props);\n\n    // Initialize ATM\n    const notes = [];\n    Object.values(NOTE_TYPE).forEach(value => {\n      notes.push(0);\n    });\n\n    this.state = {\n      ...INITIAL_STATE,\n      notes\n    };\n  }\n\n  setScreen = screen => {\n    this.setState({ screen, noteSelected: null });\n  };\n\n  getTotalAtm = () => {\n    let total = 0;\n    const { notes } = this.state;\n\n    Object.values(NOTE_TYPE).forEach((value, key) => {\n      total += value * notes[key];\n    });\n\n    return total;\n  };\n\n  clearApp = () => {\n    this.setState({\n      screen: SCREEN.SHOW_OPTIONS,\n      keyboard: \"\",\n      error: \"\",\n      noteSelected: null\n    });\n  };\n\n  keyboardType = value => {\n    this.setState(prevState => ({\n      keyboard: prevState.keyboard + value,\n      error: \"\"\n    }));\n  };\n\n  clearKeyboard = () => {\n    this.setState({ keyboard: \"\" });\n  };\n\n  selectNoteType = noteSelected => {\n    this.setState({ noteSelected });\n  };\n\n  addNotes = () => {\n    const { keyboard, noteSelected } = this.state;\n    const notes = [...this.state.notes];\n\n    const value = parseInt(keyboard);\n\n    notes[noteSelected] += value;\n\n    this.setState({\n      notes,\n      noteSelected: null\n    });\n\n    this.clearKeyboard();\n  };\n\n  withdraw = () => {\n    const { keyboard } = this.state;\n    const notes = [...this.state.notes];\n    const totalMoney = this.getTotalAtm();\n    const value = parseInt(keyboard);\n\n    const combinations = [];\n\n    if (value > totalMoney) {\n      this.setState({ error: \"Could not perform the operation\" });\n      return;\n    }\n\n    let indexCombinations = 0;\n\n    // Notes looping - create list of possibilities\n    Object.values(NOTE_TYPE)\n      .sort((a, b) => b - a)\n      .forEach((noteValue, indexNote) => {\n        const divisor = value / noteValue;\n        let firstPass = true;\n        indexCombinations = 0;\n\n        // Line looping\n        for (let i = divisor; i > 0; i--) {\n          if (combinations.length <= indexCombinations) {\n            combinations.push([]);\n          }\n\n          if (\n            firstPass &&\n            indexNote !==\n              Object.values(NOTE_TYPE).reduce((prev, curr) => prev + curr) - 1\n          ) {\n            const previousNoteValue = Object.values(NOTE_TYPE)[indexNote + 1];\n\n            if (combinations.find(el => el === previousNoteValue) === -1) {\n              i = divisor;\n              firstPass = false;\n            }\n          }\n\n          // Last note\n          if (indexNote === 0) {\n            i = divisor;\n          }\n\n          let exit = false;\n\n          // Items looping\n          for (let j = i; j > 0; j--) {\n            let currentTotalValue = combinations.reduce(\n              (prev, curr) => prev + curr\n            );\n            if (currentTotalValue + noteValue <= value) {\n              combinations.push(noteValue);\n              currentTotalValue = currentTotalValue + noteValue;\n            } else {\n              break;\n            }\n            if (indexNote === 0 && j === 1) {\n              exit = true;\n            }\n\n            console.log(j, combinations);\n          }\n\n          // Last note\n          if (exit) {\n            break;\n          }\n\n          indexCombinations++;\n        }\n      });\n\n    combinations.forEach((value, key) => {\n      console.log(key, value);\n    });\n  };\n\n  handleEnter = () => {\n    switch (this.state.screen) {\n      case SCREEN.ADD_NOTES:\n        this.addNotes();\n        break;\n\n      case SCREEN.WITHDRAW:\n        this.withdraw();\n        break;\n      default:\n        break;\n    }\n  };\n}\n\nexport default AppContainer;\n","import React from \"react\";\nimport { Subscribe } from \"unstated\";\nimport AppContainer from \"../containers/AppContainer\";\nimport { SCREEN } from \"../types\";\n\nconst Options = () => {\n  return (\n    <Subscribe to={[AppContainer]}>\n      {app => {\n        return (\n          <div className=\"content\">\n            <span>Please choose an option:</span>\n\n            <div\n              className=\"key\"\n              onClick={() => app.setScreen(SCREEN.ADD_NOTES)}\n            >\n              Add Notes (admin)\n            </div>\n            {/*\n            <div\n              className=\"key\"\n              onClick={() => app.setScreen(SCREEN.REMOVE_NOTES)}\n            >\n              Remove Notes (admin)\n            </div>\n            */}\n            <div\n              className=\"key\"\n              onClick={() => app.setScreen(SCREEN.SHOW_INFO)}\n            >\n              Show total available\n            </div>\n            <div className=\"key\" onClick={() => app.setScreen(SCREEN.WITHDRAW)}>\n              Withdraw\n            </div>\n          </div>\n        );\n      }}\n    </Subscribe>\n  );\n};\n\nexport default Options;\n","import React from \"react\";\nimport { NOTE_TYPE } from \"../types\";\nimport { Subscribe } from \"unstated\";\nimport AppContainer from \"../containers/AppContainer\";\n\nconst AddNotes = () => {\n  return (\n    <Subscribe to={[AppContainer]}>\n      {app => {\n        const { noteSelected } = app.state;\n\n        return (\n          <div className=\"content\">\n            <span>Choose note type:</span>\n            {Object.values(NOTE_TYPE).map((value, key) => (\n              <div\n                className={`key ${noteSelected === key ? \"active\" : null}`}\n                key={key}\n                onClick={() => app.selectNoteType(key)}\n              >\n                $ {value}\n              </div>\n            ))}\n            {noteSelected !== null ? (\n              <span>\n                How many notes notes of{\" $\"}\n                {Object.values(NOTE_TYPE).find(\n                  (value, key) => key === noteSelected\n                )}\n                ?\n              </span>\n            ) : null}\n          </div>\n        );\n      }}\n    </Subscribe>\n  );\n};\n\nexport default AddNotes;\n","import React from \"react\";\nimport { NOTE_TYPE } from \"../types\";\nimport { Subscribe } from \"unstated\";\nimport AppContainer from \"../containers/AppContainer\";\n\nconst Info = () => {\n  return (\n    <Subscribe to={[AppContainer]}>\n      {app => {\n        const { notes } = app.state;\n\n        return (\n          <div className=\"content\">\n            {Object.values(NOTE_TYPE).map((value, key) => (\n              <div key={key}>\n                $ {value} : {notes[key]}\n              </div>\n            ))}\n            Total: {app.getTotalAtm()}\n          </div>\n        );\n      }}\n    </Subscribe>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { NOTE_TYPE } from \"../types\";\nimport { Subscribe } from \"unstated\";\nimport AppContainer from \"../containers/AppContainer\";\n\nconst Withdraw = () => {\n  return (\n    <Subscribe to={[AppContainer]}>\n      {app => {\n        return (\n          <div className=\"content\">\n            <div>Inform amount to withdraw:</div>\n          </div>\n        );\n      }}\n    </Subscribe>\n  );\n};\n\nexport default Withdraw;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { SCREEN, NOTE_TYPE } from \"./types\";\nimport Options from \"./screens/Options\";\nimport AddNotes from \"./screens/AddNotes\";\nimport { Subscribe } from \"unstated\";\nimport AppContainer from \"./containers/AppContainer\";\nimport Info from \"./screens/Info\";\nimport Withdraw from \"./screens/Withdraw\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize ATM\n    const notes = [];\n    Object.values(NOTE_TYPE).forEach(value => {\n      notes.push(0);\n    });\n\n    this.state = {\n      screen: SCREEN.SHOW_OPTIONS,\n      notes,\n      keyboard: \"\"\n    };\n  }\n\n  componentDidMount = () => {};\n\n  renderContent = () => {\n    switch (this.app.state.screen) {\n      case SCREEN.SHOW_OPTIONS:\n        return <Options />;\n      case SCREEN.ADD_NOTES:\n        return <AddNotes />;\n      case SCREEN.SHOW_INFO:\n        return <Info />;\n      case SCREEN.WITHDRAW:\n        return <Withdraw />;\n      default:\n        break;\n    }\n  };\n\n  renderKeyboard = keyboard => <span>: {keyboard}</span>;\n\n  render() {\n    return (\n      <Subscribe to={[AppContainer]}>\n        {app => {\n          this.app = app;\n          const { error, keyboard } = app.state;\n\n          return (\n            <div className=\"app\">\n              <div className=\"atm\">\n                <div className=\"screen\">\n                  <div>{this.renderContent()}</div>\n                  <div>{this.renderKeyboard(keyboard)}</div>\n                  <div>{error}</div>\n                </div>\n                <div className=\"keyboard\">\n                  <div className=\"principal\">\n                    <div className=\"key\" onClick={() => app.keyboardType(\"1\")}>\n                      1\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"2\")}>\n                      2\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"3\")}>\n                      3\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"4\")}>\n                      4\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"5\")}>\n                      5\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"6\")}>\n                      6\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"7\")}>\n                      7\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"8\")}>\n                      8\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"9\")}>\n                      9\n                    </div>\n                    <div className=\"key\" onClick={() => app.keyboardType(\"0\")}>\n                      0\n                    </div>\n                  </div>\n                  <div className=\"actions\">\n                    <div className=\"key\" onClick={app.handleEnter}>\n                      Enter\n                    </div>\n                    <div className=\"key\" onClick={app.clearKeyboard}>\n                      Clear\n                    </div>\n                    <div className=\"key\" onClick={app.clearApp}>\n                      Cancel\n                    </div>\n                    <div className=\"key\" onClick={app.clearApp}>\n                      Back\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Subscribe>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"unstated\";\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}